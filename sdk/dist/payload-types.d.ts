/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */
export interface Config {
    collections: {
        users: User;
        things: Thing;
        nouns: Noun;
        resources: Resource;
        verbs: Verb;
        actions: Action;
        constraints: Constraint;
        roles: Role;
        'graph-schemas': GraphSchema;
        graphs: Graph;
        'event-types': EventType;
        events: Event;
        data: Datum;
        streams: Stream;
        statuses: Status;
        'state-machine-definitions': StateMachineDefinition;
        'state-machines': StateMachine;
        transitions: Transition;
        'guard-expressions': GuardExpression;
        'guard-expression-runs': GuardExpressionRun;
        'payload-preferences': PayloadPreference;
        'payload-migrations': PayloadMigration;
    };
    globals: {};
}
export interface User {
    id: string;
    updatedAt: string;
    createdAt: string;
    email: string;
    resetPasswordToken?: string | null;
    resetPasswordExpiration?: string | null;
    salt?: string | null;
    hash?: string | null;
    loginAttempts?: number | null;
    lockUntil?: string | null;
    password: string | null;
}
export interface Thing {
    id: string;
    name?: string | null;
    updatedAt: string;
    createdAt: string;
}
export interface Noun {
    id: string;
    name?: string | null;
    thing?: (string | Thing)[] | null;
    stateMachineDefinition?: (string | null) | StateMachineDefinition;
    kind: 'Entity' | 'Value';
    updatedAt: string;
    createdAt: string;
}
export interface StateMachineDefinition {
    id: string;
    name?: string | null;
    statuses: (string | Status)[];
    updatedAt: string;
    createdAt: string;
}
export interface Status {
    id: string;
    name?: string | null;
    thing?: (string | Thing)[] | null;
    stateMachineDefinition?: (string | null) | StateMachineDefinition;
    verb?: (string | null) | Verb;
    transitions?: (string | Transition)[] | null;
    updatedAt: string;
    createdAt: string;
}
export interface Verb {
    id: string;
    name?: string | null;
    thing?: (string | Thing)[] | null;
    stateMachineDefinition?: (string | null) | StateMachineDefinition;
    updatedAt: string;
    createdAt: string;
}
export interface Transition {
    id: string;
    name?: string | null;
    eventType: string | EventType;
    to: string | Status;
    verb?: (string | null) | Verb;
    guard?: (string | null) | GuardExpression;
    updatedAt: string;
    createdAt: string;
}
export interface EventType {
    id: string;
    name?: string | null;
    thing?: (string | Thing)[] | null;
    stateMachineDefinition?: (string | null) | StateMachineDefinition;
    stream?: (string | null) | Stream;
    updatedAt: string;
    createdAt: string;
}
export interface Stream {
    id: string;
    name?: string | null;
    updatedAt: string;
    createdAt: string;
}
export interface GuardExpression {
    id: string;
    name?: string | null;
    updatedAt: string;
    createdAt: string;
}
export interface Resource {
    id: string;
    name?: string | null;
    thing?: (string | Thing)[] | null;
    stateMachineDefinition?: (string | null) | StateMachineDefinition;
    type: string | Noun;
    stateMachine?: (string | null) | StateMachine;
    kind?: ('Entity' | 'Value') | null;
    updatedAt: string;
    createdAt: string;
}
export interface StateMachine {
    id: string;
    name?: string | null;
    statuses: (string | Status)[];
    stateMachineType: string | StateMachine;
    stateMachineStatus: string | Status;
    updatedAt: string;
    createdAt: string;
}
export interface Action {
    id: string;
    name?: string | null;
    thing?: (string | Thing)[] | null;
    stateMachineDefinition?: (string | null) | StateMachineDefinition;
    verb?: (string | null) | Verb;
    updatedAt: string;
    createdAt: string;
}
export interface Constraint {
    id: string;
    name?: string | null;
    kind: 'UC' | 'MR' | 'SS' | 'XC' | 'EQ';
    setComparisonArgumentLength?: number | null;
    updatedAt: string;
    createdAt: string;
}
export interface Role {
    id: string;
    name?: string | null;
    noun?: ({
        relationTo: 'resources';
        value: string | Resource;
    } | null) | ({
        relationTo: 'graphs';
        value: string | Graph;
    } | null) | ({
        relationTo: 'nouns';
        value: string | Noun;
    } | null) | ({
        relationTo: 'graph-schemas';
        value: string | GraphSchema;
    } | null);
    constraints?: (string | Constraint)[] | null;
    updatedAt: string;
    createdAt: string;
}
export interface Graph {
    id: string;
    name?: string | null;
    thing?: (string | Thing)[] | null;
    stateMachineDefinition?: (string | null) | StateMachineDefinition;
    subject: string | Role;
    verb: string | Action;
    roles?: (string | Role)[] | null;
    type?: (string | null) | GraphSchema;
    kind?: 'Entity' | null;
    updatedAt: string;
    createdAt: string;
}
export interface GraphSchema {
    id: string;
    name?: string | null;
    thing?: (string | Thing)[] | null;
    stateMachineDefinition?: (string | null) | StateMachineDefinition;
    subject: string | Role;
    verb?: (string | null) | Verb;
    roles?: (string | Role)[] | null;
    kind?: 'Entity' | null;
    updatedAt: string;
    createdAt: string;
}
export interface Event {
    id: string;
    name?: string | null;
    thing?: (string | Thing)[] | null;
    stateMachineDefinition?: (string | null) | StateMachineDefinition;
    stream?: (string | Stream)[] | null;
    type?: (string | null) | EventType;
    action?: (string | null) | Action;
    stateMachine?: (string | null) | StateMachine;
    data?: (string | null) | Datum;
    timestamp?: string | null;
    updatedAt: string;
    createdAt: string;
}
export interface Datum {
    id: string;
    name?: string | null;
    graph?: (string | null) | Graph;
    updatedAt: string;
    createdAt: string;
}
export interface GuardExpressionRun {
    id: string;
    name?: string | null;
    type?: (string | null) | GuardExpression;
    updatedAt: string;
    createdAt: string;
}
export interface PayloadPreference {
    id: string;
    user: {
        relationTo: 'users';
        value: string | User;
    };
    key?: string | null;
    value?: {
        [k: string]: unknown;
    } | unknown[] | string | number | boolean | null;
    updatedAt: string;
    createdAt: string;
}
export interface PayloadMigration {
    id: string;
    name?: string | null;
    batch?: number | null;
    updatedAt: string;
    createdAt: string;
}
//# sourceMappingURL=payload-types.d.ts.map